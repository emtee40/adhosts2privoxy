adhosts2privoxy

1. License
----------
Copyright (c) 2018 Lcferrum

This program comes with no warranty.
You must use this program at your own risk.
Licensed under BSD 2-Clause License - see LICENSE file for details.

2. About
--------
This Python 2.7 script converts multiple hosts files to single Privoxy action
file. It has simple built-in download functionality so you can supply web
address to the script instead of specifying local file path. Script gets
information about needed hosts files via config file.

3. Where to get
---------------
Main project homepage is at GitHub:

	https://github.com/lcferrum/adhosts2privoxy

4. Usage
--------
On Linux/Mac:
       ./adhosts2privoxy.py [CONFIG [ACTION_FILE [HOSTS_DIR]]]

On Windows:
       python adhosts2privoxy.py [CONFIG [ACTION_FILE [HOSTS_DIR]]]

CONFIG is a relative (to current dir) or absolute path to config file
containing list of input hosts files (default: 'adhosts2privoxy.conf'). More on
config file in next section. Config file should have the same encoding as
current locale one. ACTION_FILE is a relative (to current dir) or absolute path
to resulting Privoxy action file (default: 'hosts.action'). Action file will be
written using current locale encoding. HOSTS_DIR is a relative (to current dir)
or absolute path to directory where hosts files are located or will be
downloaded to (defaults to current directory). You can specify absolute path
for each hosts file in config - in this case, HOSTS_DIR is ignored for such
files.

Built-in download functionality is good enough for most hosted hosts files on
the web. It takes in account Content-Disposition and Content-Type headers,
supports Internationalized Domain Names. But you can always specify local file
path for hosts file in config, instead of URL, if you don't need to download
anything or prefer to rely on external download utilities such Wget or Curl.

When hosts file is processed by the script, it's hostnames (and aliases) become
patterns for 'block' action in Privoxy action file. Multiple hostnames are
collapsed in single pattern if there is a hostname that acts as high level
domain for all of them. For example, consider this hosts file:

	0.0.0.0 ads.foo.bar virii.foo.bar
	0.0.0.0 foo.bar
	0.0.0.0 more.ads.foo.bar
	0.0.0.0 ad1.foo.baz ad2.foo.baz

After processing it, resulting action file is similar to this:

	{+block{Blocked hostname.}}
	.foo.bar
	.ad1.foo.baz
	.ad2.foo.baz

Script algorithm skips malformed hosts entries or entries with "non-blocking"
IPs. Only following IPs are cosidered "blocking": whole 127.0.0.0/8 network
(incl. 127.0.0.1), 0.0.0.0, ::1, ::. Also, typical "loopback" and "localhost"
hostnames are ignored.

Some of the defaults and pre-defined values, mentioned in this section, can be
easily changed in the script source code - they are all initialized in the very
beginning of the script, hard to miss. Refer to the source code for more
information on modifying defaults.

5. Configuration file
---------------------
Configuration file consists of any number sections, each corresponding to hosts
file to be processed. Section starts with '[NAME]' header and followed by
'VARIABLE: VALUE' or 'VARIABLE=VALUE' entries. Comment lines start with '#' or
';', inline comments start with ';'. Possible VARIABLEs are: 'Url', 'File',
'Keep' and 'Encoding'. Example config file:

	[Ad Hosts]
	Url=http://foo.bar/adhosts.txt
	File=hosts
	Keep=1
	Encoding=UTF-8
	
Section name is a display name of hosts file to be processed. It will be used
in script output. In this example, section name is 'Ad Hosts'. 

'Url' variable holds a web address of hosts file. In this example, hosts file
will be downloaded from 'http://foo.bar/adhosts.txt'. 'Url' variable is
optional - if it is omitted, local hosts file will be processed and 'File'
variable should be set accordingly.

'File' variable contains path where downloaded file will be saved or, in case
of 'Url' is omitted, path to locally stored hosts file. 'File' variable is
optional only when 'Url' is provided: in absebse of 'File' variable, hosts
filename will be deduced from Content-Disposition header or web address itself.
'File' contains relative or absolute path. Relative paths (this includes
automatically deduced filenames of downloaded hosts files) are calculated
relative to directory specified in HOSTS_DIR script parameter (which is current
directory by default). In this example, downloaded hosts file will be saved in
current directory under filename 'hosts'. 

By default, after script finishes processing hosts file, it deletes it. To
control this behaviour 'Keep' variable is used - if it translates to True
(values '1', 'yes', 'true' and 'on'), file won't be deleted after being
processed. If it translates to False (values '0', 'no', 'false' and 'off') or
variable is omitted - default action takes place and file becomes deleted. In
this example, hosts file won't be deleted after being processed.

Hosts files can have wide variety of encodings. So, when reading hosts file,
script uses encoding specified in Content-Type header or in current locale, if
Content-Type encoding is not availabe or when hosts file is stored locally.
Automatically selected hosts file encoding can be overridden with 'Encoding'
variable. In this example, downloaded hosts file will be read using 'UTF-8'
encoding.

6. Usage example
----------------

Let's say, you need to turn two web hosted hosts files to Privoxy action file.
First hosts file is at 'http://foo.bar/hosts1.txt', second one is at
'http://foo.baz/hosts2.txt'. For this purpose, config file can be as simple as
this:

	[First File]
	Url=http://foo.bar/hosts1.txt
	
	[Second File]
	Url=http://foo.baz/hosts2.txt
	
Save this config as 'adhosts2privoxy.conf' in the same directory where
adhosts2privoxy script is located. Then just run the script from this directory
without any additional parameters. Resulting Privoxy action file 'hosts.action'
will be created in the same directory. Downloaded hosts files won't be kept and
will be deleted after processing.
